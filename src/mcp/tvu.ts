/**
 * Module ƒëƒÉng k√Ω c√¥ng c·ª• MCP cho TVU
 */
import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
import { z } from "zod";
import { TvuApiClient } from "../api/api.js";
import { API_CONFIG } from "../api/constants.js";
import { ENV } from "../config/config.js";
import { registerGradesTools } from "./grades.js";
import { registerTuitionTools } from "./tuition.js";
import { registerCurriculumTools } from "./curriculum.js";
import { registerStudentInfoTools } from "./student-info.js";
import { registerPostsTools } from "./posts.js";

/**
 * ƒêƒÉng k√Ω c√°c c√¥ng c·ª• MCP cho TVU
 * @param server Server MCP
 */
export function registerTvuTools(server: McpServer) {
  // Kh·ªüi t·∫°o API client
  const apiClient = new TvuApiClient();
  
  // ƒêƒÉng k√Ω c√¥ng c·ª• xem ƒëi·ªÉm h·ªçc t·∫≠p
  registerGradesTools(server, apiClient);
  
  // ƒêƒÉng k√Ω c√¥ng c·ª• xem h·ªçc ph√≠
  registerTuitionTools(server, apiClient);
  
  // ƒêƒÉng k√Ω c√¥ng c·ª• xem ch∆∞∆°ng tr√¨nh ƒë√†o t·∫°o
  registerCurriculumTools(server, apiClient);
  
  // ƒêƒÉng k√Ω c√¥ng c·ª• xem th√¥ng tin sinh vi√™n
  registerStudentInfoTools(server, apiClient);
  
  // ƒêƒÉng k√Ω c√¥ng c·ª• xem b√†i ƒëƒÉng (th√¥ng b√°o, h∆∞·ªõng d·∫´n, bi·ªÉu m·∫´u)
  registerPostsTools(server, apiClient);

  // ƒêƒÉng k√Ω c√¥ng c·ª• xem th·ªùi kh√≥a bi·ªÉu
  server.tool(
    "getSchedule",
    "Xem th·ªùi kh√≥a bi·ªÉu theo h·ªçc k·ª≥",
    {
      semester: z
        .string()
        .optional()
        .describe("M√£ h·ªçc k·ª≥ (m·∫∑c ƒë·ªãnh l√† h·ªçc k·ª≥ hi·ªán t·∫°i)"),
      date: z
        .string()
        .optional()
        .describe("Ng√†y c·ª• th·ªÉ mu·ªën xem (d·∫°ng YYYY-MM-DD)"),
    },
    async ({ semester, date }) => {
      try {
        // Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
        if (!ENV.MSSV || !ENV.PASSWORD) {
          return {
            content: [
              {
                type: "text",
                text: "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh th√¥ng tin ƒëƒÉng nh·∫≠p. Vui l√≤ng c·∫≠p nh·∫≠t file .env v·ªõi MSSV v√† PASSWORD.",
              },
            ],
          };
        }

        const scheduleData = await apiClient.getSchedule(
          semester || API_CONFIG.CURRENT_SEMESTER
        );

        // T·∫°o n·ªôi dung hi·ªÉn th·ªã
        let scheduleText = "";

        // N·∫øu c√≥ tham s·ªë ng√†y c·ª• th·ªÉ, ch·ªâ hi·ªÉn th·ªã th·ªùi kh√≥a bi·ªÉu c·ªßa ng√†y ƒë√≥
        if (date) {
          const targetDate = new Date(date);
          const targetDateString = `${targetDate.getFullYear()}-${String(
            targetDate.getMonth() + 1
          ).padStart(2, "0")}-${String(targetDate.getDate()).padStart(2, "0")}`;

          scheduleText = `# Th·ªùi kh√≥a bi·ªÉu ng√†y ${targetDate.toLocaleDateString(
            "vi-VN",
            { weekday: "long", year: "numeric", month: "long", day: "numeric" }
          )}\n\n`;

          let foundSchedule = false;

          for (const tuan of scheduleData.data.ds_tuan_tkb) {
            if (!tuan.ds_thoi_khoa_bieu) continue;

            // T√¨m ki·∫øm m√¥n h·ªçc c√≥ ng√†y h·ªçc tr√πng v·ªõi ng√†y ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
            const lichHocNgay = tuan.ds_thoi_khoa_bieu.filter((monHoc: any) => {
              // C√°ch 1: So s√°nh chu·ªói tr·ª±c ti·∫øp
              const ketQua1 = monHoc.ngay_hoc === targetDateString;

              // C√°ch 2: So s√°nh ng√†y th√°ng nƒÉm
              const ngayHoc = new Date(monHoc.ngay_hoc);
              const ketQua2 =
                ngayHoc.getDate() === targetDate.getDate() &&
                ngayHoc.getMonth() === targetDate.getMonth() &&
                ngayHoc.getFullYear() === targetDate.getFullYear();

              return ketQua1 || ketQua2;
            });

            if (lichHocNgay.length > 0) {
              foundSchedule = true;

              // S·∫Øp x·∫øp theo ti·∫øt h·ªçc
              lichHocNgay.sort(
                (a: any, b: any) => a.tiet_bat_dau - b.tiet_bat_dau
              );

              for (const monHoc of lichHocNgay as any[]) {
                scheduleText += `- **${monHoc.ten_mon}**\n`;
                scheduleText += `  - üë®‚Äçüè´ GV: ${monHoc.ten_giang_vien}\n`;
                scheduleText += `  - üè¢ Ph√≤ng: ${monHoc.ma_phong}\n`;
                scheduleText += `  - ‚è∞ Ti·∫øt ${monHoc.tiet_bat_dau}-${
                  monHoc.tiet_bat_dau + monHoc.so_tiet - 1
                }\n\n`;
              }
            }
          }

          if (!foundSchedule) {
            scheduleText += "Kh√¥ng c√≥ l·ªãch h·ªçc trong ng√†y n√†y.";
          }

          return {
            content: [
              {
                type: "text",
                text: scheduleText,
              },
            ],
          };
        }

        // N·∫øu kh√¥ng c√≥ tham s·ªë ng√†y c·ª• th·ªÉ, hi·ªÉn th·ªã to√†n b·ªô th·ªùi kh√≥a bi·ªÉu c·ªßa h·ªçc k·ª≥
        scheduleText = `# Th·ªùi kh√≥a bi·ªÉu ${
          semester || API_CONFIG.CURRENT_SEMESTER
        }\n\n`;

        if (
          !scheduleData.data ||
          !scheduleData.data.ds_tuan_tkb ||
          scheduleData.data.ds_tuan_tkb.length === 0
        ) {
          scheduleText += "Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu cho h·ªçc k·ª≥ n√†y.";
        } else {
          // S·∫Øp x·∫øp theo tu·∫ßn
          for (const tuan of scheduleData.data.ds_tuan_tkb) {
            scheduleText += `## ${tuan.ten_tuan} (${tuan.ngay_bat_dau} ƒë·∫øn ${tuan.ngay_ket_thuc})\n\n`;

            if (
              !tuan.ds_thoi_khoa_bieu ||
              tuan.ds_thoi_khoa_bieu.length === 0
            ) {
              scheduleText += "Kh√¥ng c√≥ l·ªãch h·ªçc trong tu·∫ßn n√†y.\n\n";
              continue;
            }

            // S·∫Øp x·∫øp theo ng√†y h·ªçc
            const monHocTheoNgay = new Map<string, any[]>();

            for (const monHoc of tuan.ds_thoi_khoa_bieu) {
              if (!monHocTheoNgay.has(monHoc.ngay_hoc)) {
                monHocTheoNgay.set(monHoc.ngay_hoc, []);
              }
              monHocTheoNgay.get(monHoc.ngay_hoc)?.push(monHoc);
            }

            // Hi·ªÉn th·ªã theo ng√†y h·ªçc
            for (const [ngayHoc, danhSachMon] of monHocTheoNgay.entries()) {
              // ƒê·ªãnh d·∫°ng ng√†y
              const date = new Date(ngayHoc);
              const ngay = date.toLocaleDateString("vi-VN", {
                weekday: "long",
                year: "numeric",
                month: "long",
                day: "numeric",
              });

              scheduleText += `### ${ngay}\n\n`;

              // S·∫Øp x·∫øp theo ti·∫øt h·ªçc
              danhSachMon.sort(
                (a: any, b: any) => a.tiet_bat_dau - b.tiet_bat_dau
              );

              for (const monHoc of danhSachMon as any[]) {
                scheduleText += `- **${monHoc.ten_mon}**\n`;
                scheduleText += `  - üë®‚Äçüè´ GV: ${monHoc.ten_giang_vien}\n`;
                scheduleText += `  - üè¢ Ph√≤ng: ${monHoc.ma_phong}\n`;
                scheduleText += `  - ‚è∞ Ti·∫øt ${monHoc.tiet_bat_dau}-${
                  monHoc.tiet_bat_dau + monHoc.so_tiet - 1
                }\n\n`;
              }
            }
          }
        }

        return {
          content: [
            {
              type: "text",
              text: scheduleText,
            },
          ],
        };
      } catch (error: any) {
        console.error("L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu:", error);
        return {
          content: [
            {
              type: "text",
              text: `‚ùå L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu: ${error.message}`,
            },
          ],
        };
      }
    }
  );

  // ƒêƒÉng k√Ω c√¥ng c·ª• xem th·ªùi kh√≥a bi·ªÉu h√¥m nay
  server.tool(
    "getTodaySchedule",
    "Xem th·ªùi kh√≥a bi·ªÉu h√¥m nay",
    {},
    async () => {
      try {
        // Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
        if (!ENV.MSSV || !ENV.PASSWORD) {
          return {
            content: [
              {
                type: "text",
                text: "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh th√¥ng tin ƒëƒÉng nh·∫≠p. Vui l√≤ng c·∫≠p nh·∫≠t file .env v·ªõi MSSV v√† PASSWORD.",
              },
            ],
          };
        }

        const scheduleData = await apiClient.getSchedule();

        // L·∫•y ng√†y h√¥m nay
        const today = new Date();


        // ƒê·ªãnh d·∫°ng YYYY-MM-DD v·ªõi m√∫i gi·ªù ƒë·ªãa ph∆∞∆°ng
        const todayString = `${today.getFullYear()}-${String(
          today.getMonth() + 1
        ).padStart(2, "0")}-${String(today.getDate()).padStart(2, "0")}`;


        // T·∫°o n·ªôi dung hi·ªÉn th·ªã
        let scheduleText = `# Th·ªùi kh√≥a bi·ªÉu h√¥m nay (${today.toLocaleDateString(
          "vi-VN",
          { weekday: "long", year: "numeric", month: "long", day: "numeric" }
        )})\n\n`;

        if (
          !scheduleData.data ||
          !scheduleData.data.ds_tuan_tkb ||
          scheduleData.data.ds_tuan_tkb.length === 0
        ) {
          scheduleText += "Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu.";
        } else {
          let foundSchedule = false;

          // T√¨m l·ªãch h·ªçc h√¥m nay
          for (const tuan of scheduleData.data.ds_tuan_tkb) {
            if (!tuan.ds_thoi_khoa_bieu) continue;



            // T√¨m ki·∫øm m√¥n h·ªçc c√≥ ng√†y h·ªçc tr√πng v·ªõi ng√†y h√¥m nay
            // Th·ª≠ c·∫£ hai c√°ch: so s√°nh chu·ªói v√† so s√°nh ng√†y th√°ng nƒÉm
            const lichHocHomNay = tuan.ds_thoi_khoa_bieu.filter(
              (monHoc: any) => {
                // C√°ch 1: So s√°nh chu·ªói tr·ª±c ti·∫øp
                const ketQua1 = monHoc.ngay_hoc === todayString;

                // C√°ch 2: So s√°nh ng√†y th√°ng nƒÉm
                const ngayHoc = new Date(monHoc.ngay_hoc);
                const ketQua2 =
                  ngayHoc.getDate() === today.getDate() &&
                  ngayHoc.getMonth() === today.getMonth() &&
                  ngayHoc.getFullYear() === today.getFullYear();


                // S·ª≠ d·ª•ng c·∫£ hai c√°ch ƒë·ªÉ ƒë·∫£m b·∫£o t√¨m ƒë∆∞·ª£c m√¥n h·ªçc
                return ketQua1 || ketQua2;
              }
            );


            if (lichHocHomNay.length > 0) {
              foundSchedule = true;

              // S·∫Øp x·∫øp theo ti·∫øt h·ªçc
              lichHocHomNay.sort(
                (a: any, b: any) => a.tiet_bat_dau - b.tiet_bat_dau
              );

              for (const monHoc of lichHocHomNay as any[]) {
                scheduleText += `- **${monHoc.ten_mon}**\n`;
                scheduleText += `  - üë®‚Äçüè´ GV: ${monHoc.ten_giang_vien}\n`;
                scheduleText += `  - üè¢ Ph√≤ng: ${monHoc.ma_phong}\n`;
                scheduleText += `  - ‚è∞ Ti·∫øt ${monHoc.tiet_bat_dau}-${
                  monHoc.tiet_bat_dau + monHoc.so_tiet - 1
                }\n\n`;
              }
            }
          }

          if (!foundSchedule) {
            scheduleText += "H√¥m nay kh√¥ng c√≥ l·ªãch h·ªçc.";
          }
        }

        return {
          content: [
            {
              type: "text",
              text: scheduleText,
            },
          ],
        };
      } catch (error: any) {
        console.error("L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu h√¥m nay:", error);
        return {
          content: [
            {
              type: "text",
              text: `‚ùå L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu h√¥m nay: ${error.message}`,
            },
          ],
        };
      }
    }
  );

  // ƒêƒÉng k√Ω c√¥ng c·ª• xem th·ªùi kh√≥a bi·ªÉu ng√†y mai
  server.tool(
    "getTomorrowSchedule",
    "Xem th·ªùi kh√≥a bi·ªÉu ng√†y mai",
    {},
    async () => {
      try {
        // Ki·ªÉm tra th√¥ng tin ƒëƒÉng nh·∫≠p
        if (!ENV.MSSV || !ENV.PASSWORD) {
          return {
            content: [
              {
                type: "text",
                text: "‚ö†Ô∏è Ch∆∞a c·∫•u h√¨nh th√¥ng tin ƒëƒÉng nh·∫≠p. Vui l√≤ng c·∫≠p nh·∫≠t file .env v·ªõi MSSV v√† PASSWORD.",
              },
            ],
          };
        }

        const scheduleData = await apiClient.getSchedule();

        // L·∫•y ng√†y mai
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);


        // ƒê·ªãnh d·∫°ng YYYY-MM-DD v·ªõi m√∫i gi·ªù ƒë·ªãa ph∆∞∆°ng
        const tomorrowString = `${tomorrow.getFullYear()}-${String(
          tomorrow.getMonth() + 1
        ).padStart(2, "0")}-${String(tomorrow.getDate()).padStart(2, "0")}`;


        // T·∫°o n·ªôi dung hi·ªÉn th·ªã
        let scheduleText = `# Th·ªùi kh√≥a bi·ªÉu ng√†y mai (${tomorrow.toLocaleDateString(
          "vi-VN",
          { weekday: "long", year: "numeric", month: "long", day: "numeric" }
        )})\n\n`;

        if (
          !scheduleData.data ||
          !scheduleData.data.ds_tuan_tkb ||
          scheduleData.data.ds_tuan_tkb.length === 0
        ) {
          scheduleText += "Kh√¥ng c√≥ d·ªØ li·ªáu th·ªùi kh√≥a bi·ªÉu.";
        } else {
          let foundSchedule = false;

          // T√¨m l·ªãch h·ªçc ng√†y mai
          for (const tuan of scheduleData.data.ds_tuan_tkb) {
            if (!tuan.ds_thoi_khoa_bieu) continue;

            // T√¨m ki·∫øm m√¥n h·ªçc c√≥ ng√†y h·ªçc tr√πng v·ªõi ng√†y mai
            // Th·ª≠ c·∫£ hai c√°ch: so s√°nh chu·ªói v√† so s√°nh ng√†y th√°ng nƒÉm
            const lichHocNgayMai = tuan.ds_thoi_khoa_bieu.filter(
              (monHoc: any) => {
                // C√°ch 1: So s√°nh chu·ªói tr·ª±c ti·∫øp
                const ketQua1 = monHoc.ngay_hoc === tomorrowString;

                // C√°ch 2: So s√°nh ng√†y th√°ng nƒÉm
                const ngayHoc = new Date(monHoc.ngay_hoc);
                const ketQua2 =
                  ngayHoc.getDate() === tomorrow.getDate() &&
                  ngayHoc.getMonth() === tomorrow.getMonth() &&
                  ngayHoc.getFullYear() === tomorrow.getFullYear();


                // S·ª≠ d·ª•ng c·∫£ hai c√°ch ƒë·ªÉ ƒë·∫£m b·∫£o t√¨m ƒë∆∞·ª£c m√¥n h·ªçc
                return ketQua1 || ketQua2;
              }
            );


            if (lichHocNgayMai.length > 0) {
              foundSchedule = true;

              // S·∫Øp x·∫øp theo ti·∫øt h·ªçc
              lichHocNgayMai.sort(
                (a: any, b: any) => a.tiet_bat_dau - b.tiet_bat_dau
              );

              for (const monHoc of lichHocNgayMai as any[]) {
                scheduleText += `- **${monHoc.ten_mon}**\n`;
                scheduleText += `  - üë®‚Äçüè´ GV: ${monHoc.ten_giang_vien}\n`;
                scheduleText += `  - üè¢ Ph√≤ng: ${monHoc.ma_phong}\n`;
                scheduleText += `  - ‚è∞ Ti·∫øt ${monHoc.tiet_bat_dau}-${
                  monHoc.tiet_bat_dau + monHoc.so_tiet - 1
                }\n\n`;
              }
            }
          }

          if (!foundSchedule) {
            scheduleText += "Ng√†y mai kh√¥ng c√≥ l·ªãch h·ªçc.";
          }
        }

        return {
          content: [
            {
              type: "text",
              text: scheduleText,
            },
          ],
        };
      } catch (error: any) {
        console.error("L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu ng√†y mai:", error);
        return {
          content: [
            {
              type: "text",
              text: `‚ùå L·ªói khi l·∫•y th·ªùi kh√≥a bi·ªÉu ng√†y mai: ${error.message}`,
            },
          ],
        };
      }
    }
  );
}
